/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sv.edu.udb.form.libros;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import sv.edu.udb.libreria.Autor;
import sv.edu.udb.libreria.Categoria;
import sv.edu.udb.libreria.Imprenta;
import sv.edu.udb.libreria.Libro;
import sv.edu.udb.libreria.Tema;
import sv.edu.udb.modelos.Autor_Model;
import sv.edu.udb.modelos.Categoria_Model;
import sv.edu.udb.modelos.Imprenta_Model;
import sv.edu.udb.modelos.Libro_Model;
import sv.edu.udb.modelos.Tema_Model;
import sv.edu.udb.validacion.Validacion;

/**
 *
 * @author Frank
 */
public class AgregarLibro extends javax.swing.JInternalFrame {
    List<Autor> _a;
    List<Categoria> _c;
    List<Tema> _t;
    List<Imprenta> _i;
    
    boolean validData = true;
    File imgFile = null;
    /**
     * Creates new form AgregarLibro
     */
    public AgregarLibro() {
        initComponents();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileCImagen = new javax.swing.JFileChooser();
        pnlMainFrm = new javax.swing.JPanel();
        txtTitulo = new javax.swing.JTextField();
        txtIsbn = new javax.swing.JTextField();
        txtEdicion = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtNotas = new javax.swing.JTextArea();
        btnImagen = new javax.swing.JButton();
        txtImagen = new javax.swing.JTextField();
        cmbCategorias = new javax.swing.JComboBox<>();
        cmbImprentas = new javax.swing.JComboBox<>();
        lblTitulo = new javax.swing.JLabel();
        lblIsb = new javax.swing.JLabel();
        lblEdicion = new javax.swing.JLabel();
        lblDescripcion = new javax.swing.JLabel();
        lblNotas = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listAutores = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        listTemas = new javax.swing.JList<>();
        lblAutor = new javax.swing.JLabel();
        lblTemas = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();

        fileCImagen.setAcceptAllFileFilterUsed(false);
        fileCImagen.setCurrentDirectory(new java.io.File("C:\\"));
            fileCImagen.setDialogTitle("Selecciona una imagen");
            fileCImagen.setFileFilter(new imgFilter());
            fileCImagen.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    fileCImagenActionPerformed(evt);
                }
            });

            setClosable(true);
            setName("[Thot] - Agregar Libro"); // NOI18N

            txtTitulo.setText("titulo");

            txtIsbn.setText("isbn");

            txtEdicion.setText("edicion");
            txtEdicion.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    txtEdicionActionPerformed(evt);
                }
            });

            txtDescripcion.setColumns(20);
            txtDescripcion.setLineWrap(true);
            txtDescripcion.setRows(5);
            txtDescripcion.setAutoscrolls(false);
            jScrollPane1.setViewportView(txtDescripcion);

            txtNotas.setColumns(20);
            txtNotas.setLineWrap(true);
            txtNotas.setRows(5);
            txtNotas.setAutoscrolls(false);
            jScrollPane2.setViewportView(txtNotas);

            btnImagen.setText("Seleccionar imagen");
            btnImagen.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnImagenActionPerformed(evt);
                }
            });

            txtImagen.setEditable(false);

            cmbCategorias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

            cmbImprentas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

            lblTitulo.setText("Título");

            lblIsb.setText("ISBN");

            lblEdicion.setText("Edición");

            lblDescripcion.setText("Descripción");

            lblNotas.setText("Notas");

            listAutores.setModel(new javax.swing.AbstractListModel<String>() {
                String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                public int getSize() { return strings.length; }
                public String getElementAt(int i) { return strings[i]; }
            });
            jScrollPane3.setViewportView(listAutores);

            listTemas.setModel(new javax.swing.AbstractListModel<String>() {
                String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
                public int getSize() { return strings.length; }
                public String getElementAt(int i) { return strings[i]; }
            });
            jScrollPane4.setViewportView(listTemas);

            lblAutor.setText("Selecciona uno o más autores");

            lblTemas.setText("Selecciona uno o más temas");

            btnRegistrar.setText("Registrar");
            btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnRegistrarActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout pnlMainFrmLayout = new javax.swing.GroupLayout(pnlMainFrm);
            pnlMainFrm.setLayout(pnlMainFrmLayout);
            pnlMainFrmLayout.setHorizontalGroup(
                pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlMainFrmLayout.createSequentialGroup()
                    .addGap(27, 27, 27)
                    .addGroup(pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlMainFrmLayout.createSequentialGroup()
                            .addGroup(pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlMainFrmLayout.createSequentialGroup()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(pnlMainFrmLayout.createSequentialGroup()
                                    .addComponent(btnImagen)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtImagen))
                                .addGroup(pnlMainFrmLayout.createSequentialGroup()
                                    .addGroup(pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblTitulo)
                                        .addGroup(pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtEdicion, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                                            .addComponent(txtTitulo, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addComponent(lblEdicion))
                                    .addGap(48, 48, 48)
                                    .addGroup(pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblIsb)
                                        .addComponent(txtIsbn))))
                            .addContainerGap())
                        .addGroup(pnlMainFrmLayout.createSequentialGroup()
                            .addGap(100, 100, 100)
                            .addComponent(lblDescripcion)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblNotas)
                            .addGap(124, 124, 124))
                        .addGroup(pnlMainFrmLayout.createSequentialGroup()
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainFrmLayout.createSequentialGroup()
                    .addGap(66, 66, 66)
                    .addComponent(lblAutor)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainFrmLayout.createSequentialGroup()
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainFrmLayout.createSequentialGroup()
                            .addComponent(lblTemas)
                            .addGap(59, 59, 59))))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainFrmLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainFrmLayout.createSequentialGroup()
                            .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(246, 246, 246))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainFrmLayout.createSequentialGroup()
                            .addComponent(cmbCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(cmbImprentas, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(99, 99, 99))))
            );
            pnlMainFrmLayout.setVerticalGroup(
                pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlMainFrmLayout.createSequentialGroup()
                    .addGap(25, 25, 25)
                    .addGroup(pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(pnlMainFrmLayout.createSequentialGroup()
                            .addComponent(lblTitulo)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlMainFrmLayout.createSequentialGroup()
                            .addComponent(lblIsb)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtIsbn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(lblEdicion)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(txtEdicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(31, 31, 31)
                    .addGroup(pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnImagen)
                        .addComponent(txtImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(pnlMainFrmLayout.createSequentialGroup()
                            .addGroup(pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblNotas)
                                .addComponent(lblDescripcion))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane2))
                        .addGroup(pnlMainFrmLayout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(45, 45, 45)
                    .addGroup(pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbImprentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                    .addGroup(pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblTemas)
                        .addComponent(lblAutor))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(pnlMainFrmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(28, 28, 28)
                    .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
            );

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlMainFrm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(pnlMainFrm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(24, Short.MAX_VALUE))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void txtEdicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEdicionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEdicionActionPerformed

    private void btnImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImagenActionPerformed
        fileCImagen.setCurrentDirectory(new File(System.getProperty("user.home") + System.getProperty("file.separator")+ "Desktop"));
        
        int returnVal = fileCImagen.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            imgFile = fileCImagen.getSelectedFile();
            
            txtImagen.setText(imgFile.getAbsolutePath());
        } else {
            imgFile = null;
        }
    }//GEN-LAST:event_btnImagenActionPerformed

    private void fileCImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileCImagenActionPerformed
        
    }//GEN-LAST:event_fileCImagenActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        if(imgFile != null){
            String img = Libro_Model.nuevoId() + "." + getFileExtension(imgFile);
            int[] idAutores = listAutores.getSelectedIndices();
            int[] idTemas = listTemas.getSelectedIndices();

            List<Autor> _auxA = new ArrayList();
            List<Tema> _auxT = new ArrayList();

            if (
                Validacion.validar("^(?!\\s*$).+", txtTitulo.getText(), "Ingresa un título válido!", "[Thot] - Registro de Libro")
                && Validacion.validar("^ISBN \\d{3}-\\d-\\d{3}-\\d{5}-\\d$", txtIsbn.getText(), "Ingresa un ISBN válido!", "[Thot] - Registro de Libro")
                && Validacion.validar("^(?!\\s*$).+", txtEdicion.getText(), "Ingresa una edición válida!", "[Thot] - Registro de Libro")
                && Validacion.validar("(?s)(?!\\s*$).+", txtDescripcion.getText().trim(), "Ingresa una descripción válida!", "[Thot] - Registro de Libro")
                && Validacion.validar("(?s)(?!\\s*$).+", txtNotas.getText().trim(), "Ingresa notas válidos!", "[Thot] - Registro de Libro")
            ) {
                if(Libro_Model.validarIsbn(txtIsbn.getText())){
                    JOptionPane.showMessageDialog(this, "El ISBN que quieres ingresar ya se encuentra registrado en nuestro sistema!", "[Thot] - Registro de Libro", JOptionPane.ERROR_MESSAGE);
                }else{
                    if (
                        idAutores.length > 0 && idTemas.length > 0 &&
                        cmbCategorias.getSelectedIndex() != -1 && cmbImprentas.getSelectedIndex() != -1 &&
                        cmbCategorias.getSelectedIndex() != 0 && cmbImprentas.getSelectedIndex() != 0
                    ) {
                        for (int i = 0; i < idAutores.length; i++) {
                            _auxA.add(_a.get(idAutores[i]));
                        }

                        for (int i = 0; i < idTemas.length; i++) {
                            _auxT.add(_t.get(idTemas[i]));
                        }

                        Libro _l = new Libro(
                                "",
                                txtTitulo.getText().trim(),
                                txtIsbn.getText().trim(),
                                txtEdicion.getText().trim(),
                                txtDescripcion.getText().trim(),
                                txtNotas.getText().trim(),
                                img,
                                _i.get(cmbImprentas.getSelectedIndex() - 1),
                                _c.get(cmbCategorias.getSelectedIndex() - 1),
                                _auxA, _auxT
                        );

                        if (Libro_Model.insertar(_l)) {
                            if (saveImage(_l.getIdLibro())) {
                                JOptionPane.showMessageDialog(this, "El libro ha sido registrado éxitosamente!", "[Thot] - Registro de Libro", JOptionPane.DEFAULT_OPTION);
                                initData();
                            } else {
                                JOptionPane.showMessageDialog(this, "Ha ocurrido un error al subir la imagen :$", "[Thot] - Registro de Libro", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Ha ocurrido un error al registrar el libro :$", "[Thot] - Registro de Libro", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Ingresa todos los datos requeridos!", "[Thot] - Registro de Libro", JOptionPane.ERROR_MESSAGE);
                    }   
                }
            }
        }else{
            JOptionPane.showMessageDialog(this, "Selecciona una imagen!", "[Thot] - Registro de Libro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImagen;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox<String> cmbCategorias;
    private javax.swing.JComboBox<String> cmbImprentas;
    private javax.swing.JFileChooser fileCImagen;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblAutor;
    private javax.swing.JLabel lblDescripcion;
    private javax.swing.JLabel lblEdicion;
    private javax.swing.JLabel lblIsb;
    private javax.swing.JLabel lblNotas;
    private javax.swing.JLabel lblTemas;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JList<String> listAutores;
    private javax.swing.JList<String> listTemas;
    private javax.swing.JPanel pnlMainFrm;
    private javax.swing.JTextArea txtDescripcion;
    private javax.swing.JTextField txtEdicion;
    private javax.swing.JTextField txtImagen;
    private javax.swing.JTextField txtIsbn;
    private javax.swing.JTextArea txtNotas;
    private javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables

    private String getFileExtension(File file) {
        String fileName = file.getName();
        if (fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0) {
            return fileName.substring(fileName.lastIndexOf(".") + 1);
        } else {
            return "";
        }
    }
    
    private boolean saveImage(String name){
        BufferedImage image;
        String savePath = System.getProperty("user.dir") + "^src^sv^edu^udb^data";
        savePath = String.join(System.getProperty("file.separator"), savePath.split("\\^"));
        
        try {
            URL url = new URL("file:///" + imgFile.getAbsolutePath());
            image = ImageIO.read(url);

            ImageIO.write(image, getFileExtension(imgFile), new File(savePath + System.getProperty("file.separator") + name +"." + getFileExtension(imgFile)));
            return true;
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
            return false;
        }
    }
    
    private void initData(){
        _a = Autor_Model.obtenerAutores("ORDER BY apellidos ASC");
        _c = Categoria_Model.obtenerCategorias("ORDER BY nombre ASC");
        _t = Tema_Model.obtenerTemas("ORDER BY descripcion ASC");
        _i = Imprenta_Model.obtenerImprentas("ORDER BY nombre ASC");

        if (_a.size() > 0) {
            String[] auxAutores = new String[_a.size()];

            for (int i = 0; i < _a.size(); i++) {
                auxAutores[i] = _a.get(i).getApellidos().split(" ")[0] + ", " + _a.get(i).getNombres().split(" ")[0];
            }

            listAutores.setModel(new javax.swing.DefaultComboBoxModel<>(auxAutores));
        } else {
            validData = false;
            listAutores.setEnabled(false);
            listAutores.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"No hay autores registradas"}));
        }

        if (_c.size() > 0) {
            String[] auxCategorias = new String[_c.size() + 1];

            auxCategorias[0] = "Selecciona una categoría";
            for (int i = 0; i < _c.size(); i++) {
                auxCategorias[i + 1] = _c.get(i).getNombre();
            }

            cmbCategorias.setModel(new javax.swing.DefaultComboBoxModel<>(auxCategorias));
        } else {
            validData = false;
            cmbCategorias.setEnabled(false);
            cmbCategorias.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"No hay categorías registradas"}));
        }

        if (_t.size() > 0) {
            String[] auxTemas = new String[_t.size()];

            for (int i = 0; i < _t.size(); i++) {
                auxTemas[i] = _t.get(i).getDescripcion();
            }

            listTemas.setModel(new javax.swing.DefaultComboBoxModel<>(auxTemas));
        } else {
            validData = false;
            listTemas.setEnabled(false);
            listTemas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"No hay temas registradas"}));
        }

        if (_i.size() > 0) {
            String[] auxImprentas = new String[_i.size() + 1];

            auxImprentas[0] = "Selecciona una imprenta";
            for (int i = 0; i < _i.size(); i++) {
                auxImprentas[i + 1] = _i.get(i).getNombre();
            }

            cmbImprentas.setModel(new javax.swing.DefaultComboBoxModel<>(auxImprentas));
        } else {
            validData = false;
            cmbImprentas.setEnabled(false);
            cmbImprentas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"No hay imprentas registradas"}));
        }
        
        txtTitulo.setText("");
        txtIsbn.setText("");
        txtDescripcion.setText("");
        txtNotas.setText("");
        txtEdicion.setText("");
        txtImagen.setText("");
        validData = true;
        imgFile = null;
    }
}
